/************************************
*Forecasting & Performance Summary Report
*Version 1.0
*Created By: House Of Performance with snippets from  'Campain and Keyword Summary Report by Russ Savage
*FreeAdWordsScripts.com
************************************/
var SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1QvO5aHX2iKScY9qGyCaeMlOB_izOGN8NxhEGKbvo-X4/copy"; // Make a copy of this template & replace this with your spreadsheet URL

function main() {
// Don't change these names
var tabs = [
camp_perf_7_days',
camp_perf_mtd',
camp_perf_last_month',
keyword_perf_7_days',
keyword_perf_7_days_daily'
];

for (var i in tabs) {
var results = runQuery(tabs[i]);
writeToSpreadsheet(tabs[i], results);
}

// Account and Campaign Performance Report
var ACCOUNT_REPORT_TYPE = 'ACCOUNT_PERFORMANCE_REPORT'; // Account performance report.
var CAMPAIGN_REPORT_TYPE = 'CAMPAIGN_PERFORMANCE_REPORT'; // Campaign performance report.
var DATE_RANGE_START = '20220801'; // Corrected date format (YYYYMMDD).
var DATE_RANGE_END = '20230930'; // Corrected date format (YYYYMMDD).

// Create or clear the 'account_perf_12_months' sheet.
var accountSheet = getOrCreateSheet('account_perf_12_months');

// Create or clear the 'campaignperf_12_months' sheet.
var campSheet = getOrCreateSheet('campaignperf_12_months');

// Create the header rows for both sheets.
var accountHeaderRow = ['Month', 'CTR', 'Conversion Rate', 'CPC'];
var campHeaderRow = ['Campaign', 'Month', 'CTR', 'Conversion Rate', 'CPC'];
accountSheet.clear();
campSheet.clear();
accountSheet.appendRow(accountHeaderRow);
campSheet.appendRow(campHeaderRow);

// Create the report requests.
var accountReport = AdsApp.report(
SELECT Month, Ctr, ConversionRate, AverageCpc ' +
FROM ' + ACCOUNT_REPORT_TYPE + ' ' +
DURING ' + DATE_RANGE_START + ', ' + DATE_RANGE_END
);

var campReport = AdsApp.report(
SELECT CampaignName, Month, Ctr, ConversionRate, AverageCpc ' +
FROM ' + CAMPAIGN_REPORT_TYPE + ' ' +
DURING ' + DATE_RANGE_START + ', ' + DATE_RANGE_END
);

// Process the account performance data.
var accountRows = accountReport.rows();
while (accountRows.hasNext()) {
var accountRow = accountRows.next();
var month = accountRow['Month'];
var ctr = parseFloat(accountRow['Ctr']);
var conversionRate = parseFloat(accountRow['ConversionRate']);
var cpc = parseFloat(accountRow['AverageCpc']);
// Append the data to the 'account_perf_12_months' sheet.
accountSheet.appendRow([month, ctr, conversionRate, cpc]);
}

// Process the campaign performance data.
var campaignRows = campReport.rows();
var currentCampaign = '';
var campaignStarted = false;
while (campaignRows.hasNext()) {
var campaignRow = campaignRows.next();
var campaign = campaignRow['CampaignName'];
var month = campaignRow['Month'];
var ctr = parseFloat(campaignRow['Ctr']);
var conversionRate = parseFloat(campaignRow['ConversionRate']);
var cpc = parseFloat(campaignRow['AverageCpc']);

// If a new campaign is encountered, add a section header.
if (campaign !== currentCampaign) {
currentCampaign = campaign;
if (campaignStarted) {
campSheet.appendRow(['']); // Add an empty row for separation.
}
campSheet.appendRow([campaign, '', '', '', '']); // Add the campaign as a section header.
campaignStarted = true;
}

// Append the data to the 'camp_perf_12_months' sheet with the campaign name.
campSheet.appendRow(['', month, ctr, conversionRate, cpc]);
}

Logger.log('Data has been successfully exported to Google Sheets with separate sheets.');
}

// Helper function to get or create the spreadsheet and sheet
function getOrCreateSheet(sheetName) {
var s_sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
var sheet;
try {
sheet = s_sheet.getSheetByName(sheetName);
if (!sheet) {
sheet = s_sheet.insertSheet(sheetName, 0);
}
} catch (e) {
sheet = s_sheet.insertSheet(sheetName, 0);
}
return sheet;
}


// Function to write the rows of the report to the sheet
function writeToSpreadsheet(tab, rows) {
var to_write = convertRowsToSpreadsheetRows(tab, rows);
var s_sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
var sheet = getOrCreateSheet(tab); // Use getOrCreateSheet function here.
sheet.clear();

var numRows = sheet.getMaxRows();
if (numRows < to_write.length) {
sheet.insertRows(1, to_write.length - numRows);
}
var range = sheet.getRange(1, 1, to_write.length, to_write[0].length);
range.setValues(to_write);
}


// A generic function used to build and run the report query
function runQuery(tab) {
var API_VERSION = { includeZeroImpressions: false };
var cols = getColumns(tab);
var report = getReport(tab);
var date_range = getDateRange(tab);
var where = getWhereClause(tab);
var query = ['select', cols.join(','), 'from', report, where, 'during', date_range].join(' ');
var report_iter = AdWordsApp.report(query, API_VERSION).rows();
var rows = [];
while (report_iter.hasNext()) {
rows.push(report_iter.next());
}
return rows;
}

// This function will convert row data into a format easily pushed into a spreadsheet
function convertRowsToSpreadsheetRows(tab, rows) {
var cols = getColumns(tab);
var ret_val = [cols];
for (var i in rows) {
var r = rows[i];
var ss_row = [];
for (var x in cols) {
ss_row.push(r[cols[x]]);
}
ret_val.push(ss_row);
}
return ret_val;
}

// Based on the tab name, this returns the report type to use for the query
function getReport(tab) {
if (tab.indexOf('camp_') == 0) {
return 'CAMPAIGN_PERFORMANCE_REPORT';
}
if (tab.indexOf('keyword_') == 0) {
return 'KEYWORDS_PERFORMANCE_REPORT';
}
throw new Exception('tab name not recognized: ' + tab);
}

// Based on the tab name, this returns the where clause for the query
function getWhereClause(tab) {
if (tab.indexOf('camp_') == 0) {
return 'where CampaignStatus = ENABLED and  Impressions > 0';
}
if (tab.indexOf('keyword_') == 0) {
return 'where CampaignStatus = ENABLED and AdGroupStatus = ENABLED and Status = ENABLED';
}
throw new Exception('tab name not recognized: ' + tab);
}

// Based on the tab name, this returns the columns to add into the report
function getColumns(tab) {
var ret_array = [];
if (tab.indexOf('daily') >= 0) {
ret_array.push('Date');
}
ret_array.push('CampaignName');
ret_array.push('CampaignStatus');

if (tab.indexOf('keyword_') == 0) {
ret_array = ret_array.concat(['AdGroupName', 'AdGroupStatus', 'Id', 'Criteria', 'KeywordMatchType']);
}
return ret_array.concat(['Cost', 'AverageCpc', 'Clicks', 'Impressions', 'Ctr', 'Conversions', 'ConversionRate', 'ConversionValue']);
}

// Based on the tab name, this returns the date range for the data.
function getDateRange(tab) {
if (tab.indexOf('7_days') >= 0) {
return 'LAST_7_DAYS';
}
if (tab.indexOf('mtd') >= 0) {
return 'THIS_MONTH';
}
if (tab.indexOf('last_month') >= 0) {
return 'LAST_MONTH';
}
throw new Exception('tab name not recognized: ' + tab);
}
